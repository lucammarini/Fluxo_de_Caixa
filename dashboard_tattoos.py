# -*- coding: utf-8 -*-
"""DASHBOARD - TATTOOS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OQcD6sFUNiTg50MWgNK6aY22-4_oIqKW

# **DASHBOARD DE FINANÇAS - TATUAGENS LUMM TATTOO**

## **IMPORTS**
"""

# conecta o colab ao google drive
from google.colab import drive
drive.mount('/content/drive')

# Cronometra o tempo de execução do programa
import time
start_script = time.time()

# Importa as bibliotecas necessárias
from datetime import datetime, date
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
import numpy as np

"""##**FUNÇÕES**"""

# function to add value labels
def addlabels(x,y):
    for i in range(len(x)):
        plt.text(i,round(y[i],2),round(y[i],2), ha = 'center',
                 Bbox = dict(facecolor = 'red', alpha =.2))

"""##**TRATAMENTO DE DADOS**"""

# Dados crus para dataframe:
caminho_dados_financeiros = '/content/drive/MyDrive/Tattoos/Financeiro/Fluxo de Caixa CSV.csv'
df_fin = pd.read_csv(caminho_dados_financeiros, sep = ';', header = 1)
df_fin = df_fin.fillna('')

# removendo espaços vazios:
df_fin = df_fin.drop(df_fin[df_fin.Valor == "R$ 0,00"].index)

# Traduzindo coluna Valor (string) em Valor (decimal):
df_fin['Valor'] = df_fin['Valor'].str.replace('R$ ','',regex=False)
df_fin['Valor'] = df_fin['Valor'].str.replace('.','',regex=False)
df_fin['Valor'] = df_fin['Valor'].str.replace(',','.',regex=False)
df_fin['Valor'] = df_fin['Valor'].astype(float)

# Traduzindo Data (string) em Data (datetime):
df_fin['Data'] = pd.to_datetime(df_fin['Data'], format="%d/%m/%Y")

# Usando Data como Index:
df_fin = df_fin.set_index('Data')

# Definindo se foi Ganho ou Custo:
df_fin['Ganho_bool'] = 1 * (df_fin['Valor'] >= 0)
df_fin['Preju_bool'] = 1 * (df_fin['Valor'] <  0)
df_fin['Valor_Ganho'] = df_fin['Valor'] * df_fin['Ganho_bool'] 
df_fin['Valor_Preju'] = df_fin['Valor'] * df_fin['Preju_bool'] 
df_fin = df_fin.drop(columns = {'Ganho_bool', 'Preju_bool'})

# Display do dataframe:
df_fin.head()

# Separa a soma por mês em um novo dataframe:
df_resumo = df_fin.groupby(pd.Grouper(freq='M')).sum()
df_resumo.columns = ['Somatório','Somatório_Ganho','Somatório_Preju']

# Coluna de valores cumulativos:
df_resumo['Cumulativo'] = df_resumo['Somatório'].cumsum()

# Data (string):
df_resumo['ano'] = df_resumo.index.strftime('%Y').astype(str)
df_resumo['mes'] = df_resumo.index.strftime('%m').astype(str)
df_resumo['MesAno'] = df_resumo['mes'] + '/' + df_resumo['ano']
df_resumo = df_resumo.drop(['ano','mes'], axis=1)

# Display do dataframe:
df_resumo

# Limitando o dataframe ao dia de hoje:
df_resumo = df_resumo.drop(df_resumo[df_resumo.index > pd.to_datetime(date.today())].index)
df_resumo

"""##**GERAÇÃO DE GRÁFICOS**"""

# Montando Gráficos:

x = np.arange(len(df_resumo['MesAno']))  # the label locations
width = 0.5  # the width of the bars

for n in df_resumo.columns:
  if ((n == 'MesAno')|(n == 'Somatório_Preju')):
    pass
  elif n == 'Somatório':
    with plt.style.context('Solarize_Light2'):
      # plt.plot(df_resumo['MesAno'], df_resumo[n] , linewidth=2.0)
      colors = ["tomato" if i < 0 else "yellowgreen" for i in df_resumo['Somatório']]
      plt.bar(x - width/2, df_resumo[n], width,color=colors, label=n)
      plt.title('Acompanhamento Financeiro - Tatuagens')
      plt.xlabel('Mês', fontsize=14)
      plt.xticks(rotation = 45) # Rotates X-Axis Ticks by 45-degrees
      plt.ylabel( n , fontsize=14)
      plt.xticks(x, list(df_resumo['MesAno']))  # passo de tempo
      addlabels(df_resumo['MesAno'], df_resumo[n])
    plt.show()

  elif n == 'Cumulativo':
    with plt.style.context('Solarize_Light2'):
      plt.plot(df_resumo['MesAno'], df_resumo[n] , 'm', linewidth=2.0)
      # plt.bar(x - width/2, df_resumo[n], width, label=n)
      plt.title('Acompanhamento Financeiro - Tatuagens')
      plt.xlabel('Mês', fontsize=14)
      plt.xticks(rotation = 45) # Rotates X-Axis Ticks by 45-degrees
      plt.ylabel( n , fontsize=14)
      plt.xticks(x, list(df_resumo['MesAno']))  # passo de tempo
      addlabels(df_resumo['MesAno'], df_resumo[n])
    plt.show()
  
  elif n == 'Somatório_Ganho':
    with plt.style.context('Solarize_Light2'):
      # plt.plot(df_resumo['MesAno'], df_resumo[n] , linewidth=2.0)
      colorsg = ["tomato" if i < 0 else "yellowgreen" for i in df_resumo['Somatório_Ganho']]
      colorsp = ["tomato" if i < 0 else "yellowgreen" for i in df_resumo['Somatório_Preju']]
      plt.bar(x - width/2, df_resumo['Somatório_Ganho'], width,color=colorsg, label=n)
      plt.bar(x - width/2, df_resumo['Somatório_Preju'], width,color=colorsp, label=n)
      plt.title('Acompanhamento Financeiro - Tatuagens')
      plt.xlabel('Mês', fontsize=14)
      plt.xticks(rotation = 45) # Rotates X-Axis Ticks by 45-degrees
      plt.ylabel( 'Ganhos e Perdas' , fontsize=14)
      plt.xticks(x, list(df_resumo['MesAno']))  # passo de tempo
      addlabels(df_resumo['MesAno'], df_resumo['Somatório_Ganho'])
      addlabels(df_resumo['MesAno'], df_resumo['Somatório_Preju'])
    plt.show()

"""##**FINALIZAÇÃO DO SCRIPT**"""

end_script = time.time()
print('Tempo do script {:.2f} segundos'.format((end_script - start_script)))